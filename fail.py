data={'aliases': ['f0wz'], 'bios': {'release_date': None, 'vendor': None, 'version': None}, 'bplan': {'desc': 'engineering', 'id': '18', 'year': '2019'}, 'budget_owner': 'eng - engineering', 'cluster': 'bprd', 'contacts': [{'dept_code': 'prog', 'management_level': '29', 'name': '', 'team': {'long_desc': 'eng mse architecture', 'management_chain': ['10025458', '3532', '3048', '2791', '1'], 'manager_uuid': '6967290', 'short_desc': 'eng mse ar', 'team_id': '10044442'}, 'type': 'application', 'uuid': '6550146'}, {'dept_code': 'prog', 'management_level': '29', 'name': '', 'team': {'long_desc': 'eng mse architecture', 'management_chain': ['10025458', '3532', '3048', '2791', '1'], 'manager_uuid': '6967290', 'short_desc': 'eng mse ar', 'team_id': '10044442'}, 'type': 'inherited', 'uuid': '6550146'}, {'dept_code': 'prog', 'management_level': '29', 'name': '', 'team': {'long_desc': 'eng automation and systems', 'management_chain': ['3532', '3048', '2791', '1'], 'manager_uuid': '19046466', 'short_desc': 'eng automa', 'team_id': '10025458'}, 'type': 'application', 'uuid': '5025281'}, {'dept_code': 'prog', 'management_level': '29', 'name': '', 'team': {'long_desc': 'eng automation and systems', 'management_chain': ['3532', '3048', '2791', '1'], 'manager_uuid': '19046466', 'short_desc': 'eng automa', 'team_id': '10025458'}, 'type': 'inherited', 'uuid': '5025281'}], 'cpu': {'cores': '20', 'cores_per_socket': None, 'frequency_mhz': '2597', 'manufacturer': 'genuineintel', 'model_name': 'intel(r) xeon(r) cpu e5-2660 v3 @ 2.60ghz', 'real': '2', 'total': '40'}, 'dcid': 'dcid0008389', 'drqs': {'admin': {'dept_code': 'prog', 'management_level': '24', 'name': 'patrick mcdonnell', 'team': {'long_desc': 'eng automation and systems', 'management_chain': ['3532', '3048', '2791', '1'], 'manager_uuid': '19046466', 'short_desc': 'eng automa', 'team_id': '10025458'}, 'uuid': '19046466'}, 'group': '2207', 'group_bill_to': '5028', 'group_name': 'mse architecture', 'owner': {'dept_code': 'prog', 'management_level': '25', 'name': 'ashish tripathi', 'team': {'long_desc': 'eng mse architecture', 'management_chain': ['10025458', '3532', '3048', '2791', '1'], 'manager_uuid': '6967290', 'short_desc': 'eng mse ar', 'team_id': '10044442'}, 'uuid': '6967290'}, 'parent_group_id': '2'}, 'fabrics': [], 'fqdn': 'wsawnyprdwfs01.adprd.bloomberg.com', 'guid': '62d1c1a3-6eee-4b2c-815a-a3c38e88a59d', 'hier': {'abbr': 'rdos', 'id': '5028', 'name': 'r&d os engineering', 'parent_id': '5025'}, 'hostname': 'wsawnyprdwfs01', 'is_inbbcpulst': True, 'is_virtual': False, 'last_update': '2019-02-12T00:01:28Z', 'location': {'building': 'orangeburg', 'grid': '062/088', 'height_ru': '2', 'rack_unit': '17', 'room': 'obrg dh1'}, 'manufacturer': 'hp', 'memory': {'swap': {'total_kb': '8388608'}, 'total_kb': '268306760'}, 'model': 'proliant dl380 gen9', 'networks': [{'area': 'storage', 'bridge_domain': 'stnyod1', 'cidr': '10.115.55.128/25', 'class': 'storage', 'cloud': 'tdmz', 'desc': 'storage nyod1 tdmz dmz1 app portal', 'gateways': ['10.115.55.129'], 'inner_gateway': None, 'ip_address': '10.115.55.147', 'mac_address': '30:8d:99:72:51:b0', 'name': '0x11', 'site': 'nyod1', 'switch_interfaces': [{'index': '1000025', 'name': 'po25', 'switch': {'bridge_domain': 'stnyod1', 'mac_address': '30-8d-99-72-51-b0', 'mode': None, 'node': 'snyod1-as42b', 'node_address': '10.115.55.147', 'postypes': ['sslan'], 'site': 'nyod1', 'speed': None, 'vlans': ['1102']}}, {'index': '25', 'name': 'eth25', 'switch': {'bridge_domain': 'stnyod1', 'mac_address': '30-8d-99-72-51-b0', 'mode': None, 'node': 'snyod1-as42b', 'node_address': '10.115.55.147', 'postypes': ['sslan'], 'site': 'nyod1', 'speed': None, 'vlans': ['1102']}}, {'index': '1000025', 'name': 'po25', 'switch': {'bridge_domain': 'stnyod1', 'mac_address': '30-8d-99-72-51-b0', 'mode': None, 'node': 'snyod1-as42a', 'node_address': '10.115.55.147', 'postypes': ['sslan'], 'site': 'nyod1', 'speed': None, 'vlans': ['1102']}}, {'index': '25', 'name': 'eth25', 'switch': {'bridge_domain': 'stnyod1', 'mac_address': '30-8d-99-72-51-b0', 'mode': None, 'node': 'snyod1-as42a', 'node_address': '10.115.55.147', 'postypes': ['sslan'], 'site': 'nyod1', 'speed': None, 'vlans': ['1102']}}], 'type': 'dedicated', 'vm_storage': None}, {'area': 'tdmz', 'bridge_domain': 'tnyod1-cdmzs1', 'cidr': '10.117.4.128/25', 'class': 'frontend', 'cloud': 'tdmz', 'desc': 'tdmz nyod1 - dmz1 app portal', 'gateways': ['10.117.4.129'], 'inner_gateway': None, 'ip_address': '10.117.4.147', 'mac_address': '30:8d:99:72:5d:30', 'name': '0x12', 'site': 'nyod1', 'switch_interfaces': [{'index': '369098776', 'name': 'po25', 'switch': {'bridge_domain': 'tnyod1-cdmzs1', 'mac_address': '30-8d-99-72-5d-30', 'mode': None, 'node': 'tnyod1-cdmzs1b', 'node_address': '10.117.4.147', 'postypes': [], 'site': 'nyod1', 'speed': None, 'vlans': ['1102']}}, {'index': '436305920', 'name': 'eth1/25', 'switch': {'bridge_domain': 'tnyod1-cdmzs1', 'mac_address': '30-8d-99-72-5d-30', 'mode': None, 'node': 'tnyod1-cdmzs1b', 'node_address': '10.117.4.147', 'postypes': [], 'site': 'nyod1', 'speed': None, 'vlans': ['1102']}}, {'index': '369098776', 'name': 'po25', 'switch': {'bridge_domain': 'tnyod1-cdmzs1', 'mac_address': '30-8d-99-72-5d-30', 'mode': None, 'node': 'tnyod1-cdmzs1a', 'node_address': '10.117.4.147', 'postypes': [], 'site': 'nyod1', 'speed': None, 'vlans': ['1102']}}, {'index': '436305920', 'name': 'eth1/25', 'switch': {'bridge_domain': 'tnyod1-cdmzs1', 'mac_address': '30-8d-99-72-5d-30', 'mode': None, 'node': 'tnyod1-cdmzs1a', 'node_address': '10.117.4.147', 'postypes': [], 'site': 'nyod1', 'speed': None, 'vlans': ['1102']}}], 'type': 'dedicated', 'vm_storage': None}], 'node_id': '23977', 'operating_system': {'architecture': 'x86_64', 'bb_architecture': 'mswin', 'name': 'windows', 'revision': '6.3.9600', 'version': '6.3.9600', 'xos_level': None}, 'orchestration': {'created_date': '2017-04-28 09:46:02 -0400', 'group': 'windows-engineering', 'network_location': 'tdmz', 'node_name': 'wsawnyprdwfs01.adprd.bloomberg.com'}, 'parent_cluster': 'mstss', 'po_number': '4500417497', 'received_date': '2016-01-14', 'serial_number': 'mxq55300k8', 'service_provider': 'hewlett packard', 'stage': 's4', 'stakeholders': [], 'storage': {'filesystem': [], 'lvm': [], 'network': [], 'other': [{'mount_options': [], 'mounts': ['C:'], 'name': 'C:', 'size_kb': '107374178', 'total_inodes': None, 'type': 'ntfs', 'uuid': None}, {'mount_options': [], 'mounts': ['D:'], 'name': 'D:', 'size_kb': '692754313', 'total_inodes': None, 'type': 'ntfs', 'uuid': None}, {'mount_options': [], 'mounts': ['E:'], 'name': 'E:', 'size_kb': '3200439545', 'total_inodes': None, 'type': 'ntfs', 'uuid': None}, {'mount_options': [], 'mounts': ['X:'], 'name': 'X:', 'size_kb': '0', 'total_inodes': None, 'type': '', 'uuid': None}, {'mount_options': [], 'mounts': ['Z:'], 'name': 'Z:', 'size_kb': '0', 'total_inodes': None, 'type': '', 'uuid': None}], 'zpool': []}, 'sub_stage': 's4a', 'system_spec': 'f', 'tags': ['orange', 'nyod1', 'tier3', 'wtrsv', 'wquad1', 'wprod', 'mswin', 'sysq1d', 'west', 's4', 's4a', 'ctmna', 'ctm04', 'bprd', 'mstss'], 'time': {'boot': '2019-01-26T20:33:06+00:00', 'current_tz': 'Eastern Standard Time', 'current_tz_offset': '-0500', 'zone': '(UTC-05:00) Eastern Time (US & Canada)', 'zone_desc': '(UTC-05:00) Eastern Time (US & Canada) (Eastern Standard Time -0500)'}, 'vm': {'availability_zone': None, 'cloud_type': None, 'cluster': None, 'create_date': None, 'hypervisor': None, 'networks': [], 'project': {'id': None, 'name': None}}, 'wwns': []}








def pull_data(data, desired):
    new_list = {}
    if type(data) is dict:
        for key, val in data.items():
            if type(val) is dict:
                to_add = pull_data(val,desired)  # Data type in value is another list or dict, so go another layer deeper
                for k, v in to_add.items():
                    new_list[k] = v
            else:
                if type(val) is list:  # Goes through lists to check for special cases wherein important dicts. lie within lists
                    for values in val:
                        if type(values) is dict:
                            to_add = pull_data(values, desired)
                            for k, v in to_add.items():
                                new_list[k] = v
                                if key in desired:
                                    new_list[key] = val
    return new_list



print (pull_data(data,['cluster','hostname','owners']))

print (pull_data({'erik': {'cree': ['lee',{'dave': 5},6]}, 'maxwell': 44},['dave','maxwell']))
